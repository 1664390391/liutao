2、选择排序
     /*
      * 简单的选择排序，例如从小到大进行数组的排列
      * 思路：首先指定最初的那个数据为最小值，然后进行遍历，然后内层的是从当前外层循环之后的一个数据和外层继续比较
      * 如果找到更小的，那么就将下标赋值给定义的min，也就是记录对应的下标，然后将该下标对应的数据，替换成外层当前循环的第一个数
      * 注意问题：因为然后内层的是从当前外层循环之后的一个数据和外层继续比较，所以外层最大只能到n-2下标的数据，
        n-2的时候就和内层最后一个n-1比较了
      * 如果没有，那么就是外层的第一个数就是最小的
      */
    public void SelectSort() {
          int i,j,min;
          for(i=0;i<nElems-1;i++){
              //先将要循环的数组取出第一个当做记录的最小值
              min = i;
              //从最外层的下一个和内层数据的比较
              for(j=i+1;j<nElems;j++) {
                   //如果外层的比内层的大，那么就将内层的下标记录下来
                   if(arr[i].compareTo(arr[j])>0) {
                        min = j;
                        //还要将两个数据对调，需要将当前循环中第一位（因为之前的数据都已经排好序）替换成找到的最小的数据
                        swap(arr,i,min);
                   }    
              }
          }
     }
不变性：下标小于或者等于当前外层循环的数据项总是有序的，因为外层循环之后的数据已经排好序。